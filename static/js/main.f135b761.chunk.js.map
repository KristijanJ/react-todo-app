{"version":3,"sources":["components/Item.js","components/ToDoItems.js","components/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["Item","item","index","completed","removeItem","completeItem","className","onClick","ToDoItems","items","map","key","id","value","AddItem","handleSubmit","handleInputChange","onSubmit","type","onChange","placeholder","App","e","setState","newItem","Date","now","target","preventDefault","addItem","state","alert","push","children","filter","forEach","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f135b761.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Item({\r\n  item,\r\n  index,\r\n  completed,\r\n  removeItem,\r\n  completeItem\r\n}) {\r\n  return (\r\n    <div className=\"item\">\r\n      {completed ? (\r\n        <span className=\"item-span completed\">{item} </span>\r\n      ) : (\r\n        <span className=\"item-span\">{item} </span>\r\n      )}\r\n      <div className=\"action-buttons\">\r\n        <span className=\"action-item-span\" onClick={() => completeItem(index)}>\r\n          <i className=\"fas fa-check\"></i>\r\n        </span>\r\n        <span className=\"action-item-span\" onClick={() => removeItem(index)}>\r\n          <i className=\"fas fa-times\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Item from \"./Item\";\r\n\r\nexport default function ToDoItems({ items, removeItem, completeItem }) {\r\n  return (\r\n    <div className=\"items\">\r\n      {items.map(item => {\r\n        return (\r\n          <Item\r\n            key={item.id}\r\n            index={item.id}\r\n            item={item.value}\r\n            completed={item.completed}\r\n            removeItem={removeItem}\r\n            completeItem={completeItem}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AddItem({ handleSubmit, handleInputChange }) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={handleInputChange}\r\n        placeholder=\"Enter a new to-do item...\"\r\n      />\r\n      <button type=\"submit\">Add item</button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ToDoItems from \"./components/ToDoItems\";\r\nimport AddItem from \"./components/AddItem\";\r\nimport \"./App.css\";\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      items: [\r\n        {\r\n          id: 1,\r\n          value: \"Take the dog for a walk\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: 2,\r\n          value: \"Study for the exam\",\r\n          completed: false\r\n        },\r\n        {\r\n          id: 3,\r\n          value: \"Buy new tires for the car\",\r\n          completed: false\r\n        }\r\n      ],\r\n      newItem: {\r\n        id: \"\",\r\n        value: \"\",\r\n        completed: false\r\n      }\r\n    };\r\n  }\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      newItem: {\r\n        id: Date.now(),\r\n        value: e.target.value,\r\n        completed: false\r\n      }\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.addItem(this.state.newItem, e);\r\n  };\r\n\r\n  addItem = (newItem, e) => {\r\n    let items = [...this.state.items];\r\n\r\n    if (newItem.value === \"\") {\r\n      alert(\"Please enter an Item\");\r\n    } else {\r\n      items.push(newItem);\r\n      this.setState({\r\n        items,\r\n        newItem: {\r\n          id: \"\",\r\n          value: \"\",\r\n          completed: false\r\n        }\r\n      });\r\n      e.target.children[0].value = \"\";\r\n    }\r\n  };\r\n\r\n  removeItem = index => {\r\n    let items = [...this.state.items].filter(item => item.id !== index);\r\n    this.setState({ items });\r\n  };\r\n\r\n  completeItem = index => {\r\n    let items = [...this.state.items];\r\n    items.forEach(item => {\r\n      if (item.id === index) {\r\n        item.completed === false\r\n          ? (item.completed = true)\r\n          : (item.completed = false);\r\n      }\r\n    });\r\n    this.setState({ items });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <h1 className=\"title\">TODO APP</h1>\r\n        <ToDoItems\r\n          items={this.state.items}\r\n          removeItem={this.removeItem}\r\n          completeItem={this.completeItem}\r\n        />\r\n        <hr className=\"hr-divider\" />\r\n        <AddItem\r\n          addItem={this.addItem}\r\n          handleInputChange={this.handleInputChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}